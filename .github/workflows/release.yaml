name: Draft Release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events that match 'v*'. For example: 'v1.0', 'v20.15.10'
jobs:
  create-release:
    name: Create draft release
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Flutter Notes ${{ github.ref }}
          draft: true
          prerelease: false
  build:
    name: Build application
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [apk, appbundle, linux, macos, windows, web] # [apk, web]
        include:
          - os: ubuntu-20.04
            target: apk
            channel: stable
            path: build/app/outputs/apk/release
            asset_extension: .apk
            asset_content_type: application/vnd.android.package-archive
          - os: ubuntu-20.04
            target: appbundle
            channel: stable
            path: build/app/outputs/bundle/release
            asset_extension: .aab
            asset_content_type: application/x-authorware-bin
          - os: ubuntu-20.04
            target: linux
            channel: stable
            path: build/linux/release/bundle
            asset_extension: .tar.gz
            asset_content_type: application/gzip
          - os: macos-10.15
            target: macos
            channel: stable
            path: build/macos/Build/Products/Release
            asset_extension: .zip
            asset_content_type: application/zip
          - os: windows-2019
            target: windows
            channel: stable
            path: build\windows\runner\Release
            asset_extension: .zip
            asset_content_type: application/zip
          - os: ubuntu-20.04
            target: web
            channel: stable
            path: build/web
            asset_extension: .zip
            asset_content_type: application/zip
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    needs: create-release
    steps:
      # Set up Flutter and add it to the path.
      - name: Clone Flutter repository with ${{ matrix.channel }} channel
        uses: actions/checkout@v2
        with:
          repository: 'flutter/flutter'
          ref: ${{ matrix.channel }}
          path: 'flutter'
          fetch-depth: 0
      - name: Add Flutter to the PATH for Linux, macOS and Android
        if: matrix.target != 'windows'
        run: echo "$GITHUB_WORKSPACE/flutter/bin" >> $GITHUB_PATH
      - name: Add Flutter to the PATH for Windows
        if: matrix.target == 'windows'
        run: echo "${env:GITHUB_WORKSPACE}\flutter\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Linux dependencies
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
      - name: Install Android dependencies
        if: matrix.target == 'apk' || matrix.target == 'appbundle'
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Enable web support
        if: matrix.target == 'web'
        run: flutter config --enable-web
      - name: Enable ${{ matrix.target }} desktop support
        if: matrix.target == 'linux' || matrix.target == 'windows' || matrix.target == 'macos'
        run: flutter config --enable-${{ matrix.target }}-desktop
      - name: Run Flutter doctor
        run: flutter doctor -v
        
      # Clone the repository under 'code', to avoid conflicts with 'flutter'.
      - name: Clone the repository
        uses: actions/checkout@v2
        with:
          path: 'code'
      - name: Get packages for the Flutter project
        run: flutter pub get
        working-directory: code
        
      # Build the application.
      - name: Build project
        run: flutter build -v ${{ matrix.target }} --release
        working-directory: code

      # Prepare release build package.
      - name: Copy VC redistributables to release directory
        if: matrix.target == 'windows'
        run: |
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
        working-directory: code\${{ matrix.path }}
      - name: Compress build for Windows
        if: matrix.target == 'windows'
        run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\flutter_notes_${{ matrix.target }}${{ matrix.asset_extension }}
        working-directory: code\${{ matrix.path }}
      - name: Compress build for Linux
        if: matrix.target == 'linux' || matrix.target == 'web'
        run: tar czf $GITHUB_WORKSPACE/flutter_notes_${{ matrix.target }}${{ matrix.asset_extension }} *
        working-directory: code/${{ matrix.path }}
      - name: Compress build for macOS
        if: matrix.target == 'macos'
        run: ditto -c -k --sequesterRsrc --keepParent Flutter\ Notes.app $GITHUB_WORKSPACE/flutter_notes_${{ matrix.target }}${{ matrix.asset_extension }}
        working-directory: code/${{ matrix.path }}

      # Upload the release build.
      - name: Upload release asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./flutter_notes_${{ matrix.target }}${{ matrix.asset_extension }}
          asset_name: flutter_notes_${{ matrix.target }}${{ matrix.asset_extension }}
          asset_content_type: ${{ matrix.asset_content_type }}
